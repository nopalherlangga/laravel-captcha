<?php

/**
 * Copyright (c) 2017 - present
 * LaravelGoogleRecaptcha - ReCaptchaTest.php
 * author: Roberto Belotti - roby.belotti@gmail.com
 * web : robertobelotti.com, github.com/biscolab
 * Initial version created on: 12/9/2018
 * MIT license: https://github.com/biscolab/laravel-recaptcha/blob/master/LICENSE
 */

namespace Nopal\Captcha\Tests;

use Nopal\Captcha\Captcha;

/**
 * Class ReCaptchaTest
 * @package Biscolab\ReCaptcha\Tests
 */
class CaptchaTest extends TestCase
{
	/**
	 * @var Captcha
	 */
	protected $recaptcha = null;

    /**
	 * @var Captcha
	 */
	protected $turnstile = null;

	/**
	 * @tests
	 */
	public function testRenderScriptTagGetHtmlScriptTag()
	{
		$r = $this->recaptcha->renderScriptTag();
		$this->assertEquals('<script src="https://www.google.com/recaptcha/api.js" async defer></script>', $r);
	}

	/**
	 * @test
	 */
	public function testReCaptchaV2Render()
	{

		$recaptcha = $this->recaptcha;
		$html_snippet = $recaptcha->render();
		$this->assertEquals('<div class="g-recaptcha" data-sitekey="api_site_key" data-size="normal" data-theme="light" id="recaptcha-element"></div>', $html_snippet);
	}

	/**
	 * @test
	 */
	public function testSkipByIpAndReturnArrayReturnsDefaultArray()
	{

		$mock = $this->getMockBuilder(Captcha::class)
			->setConstructorArgs([
				"api_site_key",
				"api_secret_key"
			])
			->setMethods([
				'returnArray'
			])
			->getMock();

		$mock->method('returnArray')
			->willReturn(true);

		$this->setSkipByIp($this->recaptcha, true);

		$validate = $this->recaptcha->validate("");

		$this->assertEquals(true, $validate);
	}

	/**
	 * @test
	 */
	public function testDefaultCurlTimeout()
	{

		$this->assertEquals($this->recaptcha->getCurlTimeout(), Captcha::DEFAULT_CURL_TIMEOUT);
		$this->assertEquals($this->turnstile->getCurlTimeout(), Captcha::DEFAULT_CURL_TIMEOUT);
	}

	/**
	 * @test
	 * @expectedException     \Error
	 */
	public function testReCaptchaV2htmlFormButtonShouldThrowError()
	{
		$this->expectException('\Error');
		$this->recaptcha->htmlFormButton();
	}

    protected function setSkipByIp(Captcha $builder, bool $value)
    {

        $reflection = new \ReflectionClass($builder);
        $reflection_property = $reflection->getProperty('skip_by_ip');
        $reflection_property->setAccessible(true);
        $reflection_property->setValue($builder, $value);
    }

    /**
	 * Define environment setup.
	 *
	 * @param  \Illuminate\Foundation\Application $app
	 *
	 * @return void
	 */
	protected function getEnvironmentSetUp($app)
	{

		$app['config']->set('captcha.recaptcha.site_key', 'api_site_key');
	}

	/**
	 * @inheritdoc
	 */
	protected function setUp(): void
	{

		parent::setUp(); // TODO: Change the autogenerated stub

		$this->recaptcha = new Captcha('recaptcha_v2');
		$this->turnstile = new Captcha('turnstile');
	}
}
